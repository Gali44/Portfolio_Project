{
	"info": {
		"_postman_id": "5c2d59b8-6b73-4b8b-9b09-72f17ebd4042",
		"name": "Marketing with Dynamic Variables",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json"
	},
	"item": [
		{
			"name": "Full circle",
			"item": [
				{
					"name": "Post new address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Status code is 200\", function () {\r",
									"    pm.response.to.have.status(200);\r",
									"});\r",
									"\r",
									"pm.test(\"Successful POST request\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"const jsonData = JSON.parse(responseBody);\r",
									"pm.environment.set(\"ID\", jsonData.id);\r",
									"\r",
									"pm.test(\"ID is correct\", function () {\r",
									"    pm.expect(jsonData.id).to.eql(pm.environment.get(\"ID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response is OK\", function () {\r",
									"  pm.response.to.not.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ZIP\", Math.floor(Math.random()*90000)+10000)\r",
									"pm.environment.set(\"LINE2\", Math.floor(Math.random()*900)+100);\r",
									"\r",
									"const stateAbbreviations = [\r",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									" 'VT','VI','VA','WA','WV','WI','WY'\r",
									"];\r",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"pm.environment.set(\"STATE\", randomState);\r",
									"\r",
									"let first = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"pm.environment.set(\"FIRST\", first);\r",
									"\r",
									"let last = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"LAST\", last);\r",
									"\r",
									"let company = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"COMPANY\", company);\r",
									"\r",
									"let street = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"LINE1\", street);\r",
									"\r",
									"let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"CITY\", city);\r",
									"\r",
									"let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"COUNTRY\", country);\r",
									"\r",
									"let phone = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"PHONE\", phone);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "itpK3pfaQak4j9gwY72K1XhBWsZ3-eq6mEdO6iBm84Q.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTI0VDIyOjI3OjI3LjkyOVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0yNVQwMjoyNzoyNy45MjlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FIRST}}\",\r\n            \"lastName\": \"{{LAST}}\"\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{LINE1}}\",\r\n        \"addressLine2\": \"{{LINE2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{CITY}}\",\r\n        \"country\": \"{{COUNTRY}}\",\r\n        \"subdivision\": \"{{STATE}}\",\r\n        \"zipCode\": \"{{ZIP}}\",\r\n        \"phoneNumber\": \"{{PHONE}}\"\r\n    },\r\n    \"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Make default",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code one of 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body is ok\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is with body and without error\", function () {\r",
									"  pm.response.to.not.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "qblwpSQC6VWGT5DRtNA2nYBT2An2qzJT599CCmfZORk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTAyVDIzOjI2OjU5LjM1OVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0wM1QwMzoyNjo1OS4zNTlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"id\": \"{{ID}}\"\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/default",
							"host": [
								"{{URL}}"
							],
							"path": [
								"default"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get all addresses",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code one of 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are ok\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"fullName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"country\");\r",
									"    pm.expect(pm.response.text()).to.include(\"subdivision\");\r",
									"    pm.expect(pm.response.text()).to.include(\"city\");\r",
									"    pm.expect(pm.response.text()).to.include(\"zipCode\");\r",
									"    pm.expect(pm.response.text()).to.include(\"phoneNumber\");\r",
									"    pm.expect(pm.response.text()).to.include(\"company\");\r",
									"    pm.expect(pm.response.text()).to.include(\"addressLine1\");\r",
									"    pm.expect(pm.response.text()).to.include(\"addressLine2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body values are ok\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ID\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"FIRST\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"LAST\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"LINE1\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"LINE2\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COUNTRY\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"STATE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"PHONE\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"ZIP\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"COMPANY\"));\r",
									"    pm.expect(pm.response.text()).to.include(pm.environment.get(\"CITY\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response is with body and without error\", function () {\r",
									"  pm.response.to.not.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get specific address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code one of 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are ok\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"fullName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"country\");\r",
									"    pm.expect(pm.response.text()).to.include(\"subdivision\");\r",
									"    pm.expect(pm.response.text()).to.include(\"city\");\r",
									"    pm.expect(pm.response.text()).to.include(\"zipCode\");\r",
									"    pm.expect(pm.response.text()).to.include(\"phoneNumber\");\r",
									"    pm.expect(pm.response.text()).to.include(\"company\");\r",
									"    pm.expect(pm.response.text()).to.include(\"addressLine1\");\r",
									"    pm.expect(pm.response.text()).to.include(\"addressLine2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body values are ok\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
									"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FIRST\"));\r",
									"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LAST\"));\r",
									"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"COUNTRY\"));\r",
									"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"STATE\"));\r",
									"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"CITY\"));\r",
									"    pm.expect(jsonData.address.zipCode).to.eql(\"\" + pm.environment.get(\"ZIP\"));\r",
									"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"PHONE\"));\r",
									"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));\r",
									"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"LINE1\"));\r",
									"    pm.expect(jsonData.address.addressLine2).to.eql(\"\" + pm.environment.get(\"LINE2\"));\r",
									"    pm.expect(jsonData.isDefaultAddress).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Types of values are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.address).to.be.a(\"object\");\r",
									"    pm.expect(jsonData.address.id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.fullName).to.be.a(\"object\");\r",
									"    pm.expect(jsonData.address.fullName.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.fullName.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.country).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.subdivision).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.zipCode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.phoneNumber).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.company).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.addressLine1).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.addressLine1).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.isDefaultAddress).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is with body and without error\", function () {\r",
									"  pm.response.to.not.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{ID}}"
							],
							"query": [
								{
									"key": "id",
									"value": "{{ID}}",
									"disabled": true
								}
							]
						}
					},
					"response": []
				},
				{
					"name": "Patch address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code one of 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is correct\", function () {\r",
									"  pm.response.to.not.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"  pm.response.to.have.jsonBody({});\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ZIP\", Math.floor(Math.random()*90000)+10000)\r",
									"pm.environment.set(\"LINE2\", Math.floor(Math.random()*900)+100);\r",
									"\r",
									"const stateAbbreviations = [\r",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									" 'VT','VI','VA','WA','WV','WI','WY'\r",
									"];\r",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"pm.environment.set(\"STATE\", randomState);\r",
									"\r",
									"let first = pm.variables.replaceIn('{{$randomFirstName}}')\r",
									"pm.environment.set(\"FIRST\", first);\r",
									"\r",
									"let last = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"LAST\", last);\r",
									"\r",
									"let company = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"COMPANY\", company);\r",
									"\r",
									"let street = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"LINE1\", street);\r",
									"\r",
									"let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"CITY\", city);\r",
									"\r",
									"let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"COUNTRY\", country);\r",
									"\r",
									"let phone = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"PHONE\", phone);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "PATCH",
						"header": [],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"id\": \"{{ID}}\",\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FIRST}}\",\r\n            \"lastName\": \"{{LAST}}\"\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{LINE1}}\",\r\n        \"addressLine2\": \"{{LINE2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{CITY}}\",\r\n        \"country\": \"{{COUNTRY}}\",\r\n        \"subdivision\": \"{{STATE}}\",\r\n        \"zipCode\": \"{{ZIP}}\",\r\n        \"phoneNumber\": \"{{PHONE}}\"\r\n    },\r\n    \"setAsDefault\": true,\r\n    \"fieldMask\": {\r\n        \"paths\": [\r\n            \"fullName.firstName\",\r\n            \"fullName.lastName\",\r\n            \"company\",\r\n            \"addressLine1\",\r\n            \"addressLine2\",\r\n            \"city\",\r\n            \"country\",\r\n            \"subdivision\",\r\n            \"zipCode\",\r\n            \"phoneNumber\",\r\n            \"setAsDefault\"\r\n        ]\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get changed address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code one of 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"id\");\r",
									"    pm.expect(pm.response.text()).to.include(\"fullName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"firstName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"lastName\");\r",
									"    pm.expect(pm.response.text()).to.include(\"country\");\r",
									"    pm.expect(pm.response.text()).to.include(\"subdivision\");\r",
									"    pm.expect(pm.response.text()).to.include(\"city\");\r",
									"    pm.expect(pm.response.text()).to.include(\"zipCode\");\r",
									"    pm.expect(pm.response.text()).to.include(\"phoneNumber\");\r",
									"    pm.expect(pm.response.text()).to.include(\"company\");\r",
									"    pm.expect(pm.response.text()).to.include(\"addressLine1\");\r",
									"    pm.expect(pm.response.text()).to.include(\"addressLine2\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body values are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.address.id).to.eql(pm.environment.get(\"ID\"));\r",
									"    pm.expect(jsonData.address.fullName.firstName).to.eql(pm.environment.get(\"FIRST\"));\r",
									"    pm.expect(jsonData.address.fullName.lastName).to.eql(pm.environment.get(\"LAST\"));\r",
									"    pm.expect(jsonData.address.country).to.eql(pm.environment.get(\"COUNTRY\"));\r",
									"    pm.expect(jsonData.address.subdivision).to.eql(pm.environment.get(\"STATE\"));\r",
									"    pm.expect(jsonData.address.city).to.eql(pm.environment.get(\"CITY\"));\r",
									"    pm.expect(jsonData.address.zipCode).to.eql(\"\" + pm.environment.get(\"ZIP\"));\r",
									"    pm.expect(jsonData.address.phoneNumber).to.eql(pm.environment.get(\"PHONE\"));\r",
									"    pm.expect(jsonData.address.company).to.eql(pm.environment.get(\"COMPANY\"));\r",
									"    pm.expect(jsonData.address.addressLine1).to.eql(pm.environment.get(\"LINE1\"));\r",
									"    pm.expect(jsonData.address.addressLine2).to.eql(\"\" + pm.environment.get(\"LINE2\"));\r",
									"    pm.expect(jsonData.isDefaultAddress).to.eql(true);\r",
									"});\r",
									"\r",
									"pm.test(\"Types of values are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.address).to.be.a(\"object\");\r",
									"    pm.expect(jsonData.address.id).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.fullName).to.be.a(\"object\");\r",
									"    pm.expect(jsonData.address.fullName.firstName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.fullName.lastName).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.country).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.subdivision).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.city).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.zipCode).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.phoneNumber).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.company).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.addressLine1).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.address.addressLine2).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.isDefaultAddress).to.be.a(\"boolean\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is ok\", function () {\r",
									"  pm.response.to.not.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code one of 200\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"{}\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is correct\", function () {\r",
									"  pm.response.to.not.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.be.an (\"object\")\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"  pm.response.to.have.jsonBody({});\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Get deleted address",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code is one of 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 401, 403, 404, 422]);\r",
									"});\r",
									"\r",
									"pm.test(\"Code is not 200\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"     pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"     pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"     pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"     pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"     pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Types of values are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.details).to.be.a(\"object\");\r",
									"    pm.expect(jsonData.details.cant_find).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"    pm.expect(pm.response.text()).to.include(\"details\");\r",
									"    pm.expect(pm.response.text()).to.include(\"cant_find\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cant find ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.details.cant_find).to.include(pm.environment.get(\"ID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response is error\", function () {\r",
									"   pm.response.to.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"   pm.response.to.be.json;\r",
									"   pm.response.to.be.an (\"object\")\r",
									"   pm.response.to.not.have.jsonBody('error');\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "GET",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{ID}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Delete address 2nd time",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"Code one of 400\", function () {\r",
									"    pm.expect(pm.response.code).to.be.oneOf([400, 401, 403, 404, 422]);\r",
									"});\r",
									"\r",
									"pm.test(\"Code is not 200\", function () {\r",
									"    pm.expect(pm.response.code).to.not.be.oneOf([200, 201]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"     pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"     pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"     pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"     pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"     pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"     pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Types of values are correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.be.a(\"string\");\r",
									"    pm.expect(jsonData.details).to.be.a(\"object\");\r",
									"    pm.expect(jsonData.details.cant_find).to.be.a(\"string\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"message\");\r",
									"    pm.expect(pm.response.text()).to.include(\"details\");\r",
									"    pm.expect(pm.response.text()).to.include(\"cant_find\");\r",
									"});\r",
									"\r",
									"pm.test(\"Cant find ID\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.details.cant_find).to.include(pm.environment.get(\"ID\"));\r",
									"});\r",
									"\r",
									"pm.test(\"Response is error\", function () {\r",
									"   pm.response.to.be.error;\r",
									"   pm.response.to.be.withBody;\r",
									"   pm.response.to.be.json;\r",
									"   pm.response.to.be.an (\"object\")\r",
									"   pm.response.to.not.have.jsonBody('error');\r",
									" })"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "DELETE",
						"header": [],
						"url": {
							"raw": "{{URL}}/{{ID}}",
							"host": [
								"{{URL}}"
							],
							"path": [
								"{{ID}}"
							]
						}
					},
					"response": []
				}
			]
		},
		{
			"name": "Negative",
			"item": [
				{
					"name": "Post address with null firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST status code not 200\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are ok\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body value is correct\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"missing_required_field\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is correct\", function () {\r",
									"  pm.response.to.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.be.an (\"object\")\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ZIP\", Math.floor(Math.random()*90000)+10000)\r",
									"pm.environment.set(\"LINE2\", Math.floor(Math.random()*900)+100);\r",
									"\r",
									"const stateAbbreviations = [\r",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									" 'VT','VI','VA','WA','WV','WI','WY'\r",
									"];\r",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"pm.environment.set(\"STATE\", randomState);\r",
									"\r",
									"pm.environment.set(\"FIRST\", null);\r",
									"\r",
									"let last = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"LAST\", last);\r",
									"\r",
									"let company = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"COMPANY\", company);\r",
									"\r",
									"let street = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"LINE1\", street);\r",
									"\r",
									"let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"CITY\", city);\r",
									"\r",
									"let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"COUNTRY\", country);\r",
									"\r",
									"let phone = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"PHONE\", phone);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "qblwpSQC6VWGT5DRtNA2nYBT2An2qzJT599CCmfZORk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTAyVDIzOjI2OjU5LjM1OVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0wM1QwMzoyNjo1OS4zNTlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": {{FIRST}},\r\n            \"lastName\": null\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{LINE1}}\",\r\n        \"addressLine2\": \"{{LINE2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{CITY}}\",\r\n        \"country\": \"{{COUNTRY}}\",\r\n        \"subdivision\": \"{{STATE}}\",\r\n        \"zipCode\": \"{{ZIP}}\",\r\n        \"phoneNumber\": \"{{PHONE}}\"\r\n    },\r\n    \"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post address with integer in firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST status code not 200\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are ok\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body value is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Unexpected value for field firstName\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is correct\", function () {\r",
									"  pm.response.to.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.be.an (\"object\")\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ZIP\", Math.floor(Math.random()*90000)+10000)\r",
									"pm.environment.set(\"LINE2\", Math.floor(Math.random()*900)+100);\r",
									"\r",
									"const stateAbbreviations = [\r",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									" 'VT','VI','VA','WA','WV','WI','WY'\r",
									"];\r",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"pm.environment.set(\"STATE\", randomState);\r",
									"\r",
									"let first = pm.variables.replaceIn('{{$randomInt}}')\r",
									"pm.environment.set(\"FIRST\", first);\r",
									"\r",
									"let last = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"LAST\", last);\r",
									"\r",
									"let company = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"COMPANY\", company);\r",
									"\r",
									"let street = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"LINE1\", street);\r",
									"\r",
									"let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"CITY\", city);\r",
									"\r",
									"let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"COUNTRY\", country);\r",
									"\r",
									"let phone = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"PHONE\", phone);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "itpK3pfaQak4j9gwY72K1XhBWsZ3-eq6mEdO6iBm84Q.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTI0VDIyOjI3OjI3LjkyOVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0yNVQwMjoyNzoyNy45MjlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FIRST}}\",\r\n            \"lastName\": \"{{LAST}}\"\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{LINE1}}\",\r\n        \"addressLine2\": \"{{LINE2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{CITY}}\",\r\n        \"country\": \"{{COUNTRY}}\",\r\n        \"subdivision\": \"{{STATE}}\",\r\n        \"zipCode\": \"{{ZIP}}\",\r\n        \"phoneNumber\": \"{{PHONE}}\"\r\n    },\r\n    \"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post address with boolean firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST status code not 200\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are ok\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body value is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Unexpected value for field firstName\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is correct\", function () {\r",
									"  pm.response.to.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.be.an (\"object\")\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ZIP\", Math.floor(Math.random()*90000)+10000)\r",
									"pm.environment.set(\"LINE2\", Math.floor(Math.random()*900)+100);\r",
									"\r",
									"const stateAbbreviations = [\r",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									" 'VT','VI','VA','WA','WV','WI','WY'\r",
									"];\r",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"pm.environment.set(\"STATE\", randomState);\r",
									"\r",
									"let first = pm.variables.replaceIn('{{$randomBoolean}}')\r",
									"pm.environment.set(\"FIRST\", first);\r",
									"\r",
									"let last = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"LAST\", last);\r",
									"\r",
									"let company = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"COMPANY\", company);\r",
									"\r",
									"let street = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"LINE1\", street);\r",
									"\r",
									"let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"CITY\", city);\r",
									"\r",
									"let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"COUNTRY\", country);\r",
									"\r",
									"let phone = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"PHONE\", phone);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "itpK3pfaQak4j9gwY72K1XhBWsZ3-eq6mEdO6iBm84Q.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTI0VDIyOjI3OjI3LjkyOVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0yNVQwMjoyNzoyNy45MjlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": {{FIRST}},\r\n            \"lastName\": \"{{LAST}}\"\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{LINE1}}\",\r\n        \"addressLine2\": \"{{LINE2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{CITY}}\",\r\n        \"country\": \"{{COUNTRY}}\",\r\n        \"subdivision\": \"{{STATE}}\",\r\n        \"zipCode\": \"{{ZIP}}\",\r\n        \"phoneNumber\": \"{{PHONE}}\"\r\n    },\r\n    \"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post address with symbols in firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST status code not 200\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are ok\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body value is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Unexpected value for field firstName\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is correct\", function () {\r",
									"  pm.response.to.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.be.an (\"object\")\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ZIP\", Math.floor(Math.random()*90000)+10000)\r",
									"pm.environment.set(\"LINE2\", Math.floor(Math.random()*900)+100);\r",
									"\r",
									"const stateAbbreviations = [\r",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									" 'VT','VI','VA','WA','WV','WI','WY'\r",
									"];\r",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"pm.environment.set(\"STATE\", randomState);\r",
									"\r",
									"const first = ['!','/','?','|','-','+','=','#','$','%','^','*','&',')'];\r",
									"const randomFirst = first[Math.floor(Math.random() * first.length)];\r",
									"pm.environment.set(\"FIRST\", randomFirst);\r",
									"\r",
									"let last = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"LAST\", last);\r",
									"\r",
									"let company = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"COMPANY\", company);\r",
									"\r",
									"let street = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"LINE1\", street);\r",
									"\r",
									"let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"CITY\", city);\r",
									"\r",
									"let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"COUNTRY\", country);\r",
									"\r",
									"let phone = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"PHONE\", phone);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "qblwpSQC6VWGT5DRtNA2nYBT2An2qzJT599CCmfZORk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTAyVDIzOjI2OjU5LjM1OVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0wM1QwMzoyNjo1OS4zNTlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FIRST}}\",\r\n            \"lastName\": \"{{LAST}}\"\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{LINE1}}\",\r\n        \"addressLine2\": \"{{LINE2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{CITY}}\",\r\n        \"country\": \"{{COUNTRY}}\",\r\n        \"subdivision\": \"{{STATE}}\",\r\n        \"zipCode\": \"{{ZIP}}\",\r\n        \"phoneNumber\": \"{{PHONE}}\"\r\n    },\r\n    \"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post address with space in firstName",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST status code not 200\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are ok\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body value is correct\", function () {\r",
									"    var jsonData = pm.response.json();\r",
									"    pm.expect(jsonData.message).to.eql(\"Unexpected value for field firstName\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is correct\", function () {\r",
									"  pm.response.to.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.be.an (\"object\")\r",
									"  pm.response.to.not.have.jsonBody('error');\r",
									"})"
								],
								"type": "text/javascript"
							}
						},
						{
							"listen": "prerequest",
							"script": {
								"exec": [
									"pm.environment.set(\"ZIP\", Math.floor(Math.random()*90000)+10000)\r",
									"pm.environment.set(\"LINE2\", Math.floor(Math.random()*900)+100);\r",
									"\r",
									"const stateAbbreviations = [\r",
									" 'AL','AK','AS','AZ','AR','CA','CO','CT','DE','DC','FM','FL','GA',\r",
									" 'GU','HI','ID','IL','IN','IA','KS','KY','LA','ME','MH','MD','MA',\r",
									" 'MI','MN','MS','MO','MT','NE','NV','NH','NJ','NM','NY','NC','ND',\r",
									" 'MP','OH','OK','OR','PW','PA','PR','RI','SC','SD','TN','TX','UT',\r",
									" 'VT','VI','VA','WA','WV','WI','WY'\r",
									"];\r",
									"const randomState = stateAbbreviations[Math.floor(Math.random() * stateAbbreviations.length)];\r",
									"pm.environment.set(\"STATE\", randomState);\r",
									"\r",
									"pm.environment.set(\"FIRST\", \" \");\r",
									"\r",
									"let last = pm.variables.replaceIn('{{$randomLastName}}')\r",
									"pm.environment.set(\"LAST\", last);\r",
									"\r",
									"let company = pm.variables.replaceIn('{{$randomCompanyName}}')\r",
									"pm.environment.set(\"COMPANY\", company);\r",
									"\r",
									"let street = pm.variables.replaceIn('{{$randomStreetAddress}}')\r",
									"pm.environment.set(\"LINE1\", street);\r",
									"\r",
									"let city = pm.variables.replaceIn('{{$randomCity}}')\r",
									"pm.environment.set(\"CITY\", city);\r",
									"\r",
									"let country = pm.variables.replaceIn('{{$randomCountry}}')\r",
									"pm.environment.set(\"COUNTRY\", country);\r",
									"\r",
									"let phone = pm.variables.replaceIn('{{$randomPhoneNumber}}')\r",
									"pm.environment.set(\"PHONE\", phone);"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "qblwpSQC6VWGT5DRtNA2nYBT2An2qzJT599CCmfZORk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTAyVDIzOjI2OjU5LjM1OVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0wM1QwMzoyNjo1OS4zNTlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": \"{{FIRST}}\",\r\n            \"lastName\": \"{{LAST}}\"\r\n        },\r\n        \"company\": \"{{COMPANY}}\",\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": \"{{LINE1}}\",\r\n        \"addressLine2\": \"{{LINE2}}\",\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": \"{{CITY}}\",\r\n        \"country\": \"{{COUNTRY}}\",\r\n        \"subdivision\": \"{{STATE}}\",\r\n        \"zipCode\": \"{{ZIP}}\",\r\n        \"phoneNumber\": \"{{PHONE}}\"\r\n    },\r\n    \"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post address with no input",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST status code not 200\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are ok\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"missing_required_field\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is correct\", function () {\r",
									"  pm.response.to.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.be.an (\"object\");\r",
									"  pm.response.to.not.have.jsonBody('error')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "qblwpSQC6VWGT5DRtNA2nYBT2An2qzJT599CCmfZORk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTAyVDIzOjI2OjU5LjM1OVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0wM1QwMzoyNjo1OS4zNTlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"firstName\": null,\r\n            \"lastName\": null\r\n        },\r\n        \"company\": null,\r\n        \"taxInfo\": {\r\n            \"id\": null,\r\n            \"type\": null\r\n        },\r\n        \"addressLine1\": null,\r\n        \"addressLine2\": null,\r\n        \"street\": {\r\n            \"name\": null,\r\n            \"number\": null\r\n        },\r\n        \"city\": null,\r\n        \"country\": null,\r\n        \"subdivision\": null,\r\n        \"zipCode\": null,\r\n        \"phoneNumber\": null,\r\n        \"location\": null\r\n\r\n    },\r\n    \"setAsDefault\": false\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				},
				{
					"name": "Post address with only one dot",
					"event": [
						{
							"listen": "test",
							"script": {
								"exec": [
									"pm.test(\"POST status code not 200\", function () {\r",
									"    pm.expect(pm.response.code).not.to.be.oneOf([200, 201, 202]);\r",
									"});\r",
									"\r",
									"pm.test(\"Response time is less than 500ms\", function () {\r",
									"    pm.expect(pm.response.responseTime).to.be.below(500);\r",
									"});\r",
									"\r",
									"pm.test(\"Response size is less than 1024B\", function () {\r",
									"    pm.expect(pm.response.responseSize).to.be.below(1024);\r",
									"});\r",
									"\r",
									"pm.test(\"Body keys are ok\", function () {\r",
									"    pm.expect(pm.response.text()).not.to.include(\"id\");\r",
									"});\r",
									"\r",
									"pm.test(\"Header is correct\", function () {\r",
									"    pm.response.to.have.header(\"Content-Type\", \"application/json;charset=utf-8\");\r",
									"    pm.response.to.have.header(\"Connection\", \"keep-alive\");\r",
									"    pm.response.to.have.header(\"Server\", \"Pepyaka/1.19.10\");\r",
									"    pm.response.to.have.header(\"X-Content-Type-Options\", \"nosniff\");\r",
									"});\r",
									"\r",
									"pm.test(\"Body matches string\", function () {\r",
									"    pm.expect(pm.response.text()).to.include(\"missing_required_field\");\r",
									"});\r",
									"\r",
									"pm.test(\"Response is correct\", function () {\r",
									"  pm.response.to.be.error;\r",
									"  pm.response.to.be.withBody;\r",
									"  pm.response.to.be.json;\r",
									"  pm.response.to.be.an (\"object\");\r",
									"  pm.response.to.not.have.jsonBody('error')\r",
									"})"
								],
								"type": "text/javascript"
							}
						}
					],
					"request": {
						"method": "POST",
						"header": [
							{
								"warning": "This is a duplicate header and will be overridden by the Authorization header generated by Postman.",
								"key": "Authorization",
								"value": "qblwpSQC6VWGT5DRtNA2nYBT2An2qzJT599CCmfZORk.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTAyVDIzOjI2OjU5LjM1OVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0wM1QwMzoyNjo1OS4zNTlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
								"type": "text"
							}
						],
						"body": {
							"mode": "raw",
							"raw": "{\r\n    \"address\": {\r\n        \"fullName\": {\r\n            \"lastName\": \".\"\r\n        }\r\n    }\r\n}",
							"options": {
								"raw": {
									"language": "json"
								}
							}
						},
						"url": {
							"raw": "{{URL}}",
							"host": [
								"{{URL}}"
							]
						}
					},
					"response": []
				}
			]
		}
	],
	"auth": {
		"type": "apikey",
		"apikey": [
			{
				"key": "value",
				"value": "itpK3pfaQak4j9gwY72K1XhBWsZ3-eq6mEdO6iBm84Q.eyJpbnN0YW5jZUlkIjoiZjQ2Y2Q1MDItZjcyZi00NGY3LTk2MzgtNWRhMWRlYjBiNGU3IiwiYXBwRGVmSWQiOiIxNTA1Yjc3NS1lODg1LWViMWItYjY2NS0xZTQ4NWQ5YmY5MGUiLCJtZXRhU2l0ZUlkIjoiMjhiNzkzZDYtNTQyNC00MDU4LTgwNDktMDI2YTRkYjAyODJmIiwic2lnbkRhdGUiOiIyMDIyLTA0LTI0VDIyOjI3OjI3LjkyOVoiLCJ1aWQiOiIzYzI0ZDdiYS02ODJhLTQ1NDgtYmRmOS0zNDA4NjM0ZWZkNjAiLCJkZW1vTW9kZSI6ZmFsc2UsImFpZCI6IjQ5NTA2ZTczLTdkOTItNDM4Yy1iYzZiLTU1YjY0MjFjNTM2ZCIsImJpVG9rZW4iOiJkY2RiNDZkNC1hMzBiLTA0YWYtMTY3MS01ZmNiOTMwMDljYzgiLCJzaXRlT3duZXJJZCI6ImY5MTRmMTFjLWFhYjMtNDUyNy04ZDRlLWJhYjc2MjE0M2E2MCIsImV4cGlyYXRpb25EYXRlIjoiMjAyMi0wNC0yNVQwMjoyNzoyNy45MjlaIiwiaGFzVXNlclJvbGUiOmZhbHNlfQ",
				"type": "string"
			},
			{
				"key": "key",
				"value": "Authorization",
				"type": "string"
			}
		]
	},
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	]
}